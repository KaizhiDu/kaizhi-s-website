/**
 * Created by Kaizhi Du on 2019/11/21.
 */
import React from 'react';
import ReactMarkdown from "react-markdown";
import CodeBlock from "../../utils/CodeBlock";

const Note = () => {

    const input = "# 基础Angular手册\n\n\n\n## html里面的东西如何传到ts里面呢？\n\n我们用 [xx]=\"123\" => Input('xx') 来进行数据传递\n\n下面是一个小栗子:\n\nhtml:\n\n\`\`\`html\n<app-recipe-item\n      *ngFor=\"let recipe of recipes; let i = index\"\n      [recipe]=\"recipe\"\n      [index]=\"i\"\n    >\n    </app-recipe-item>\n\`\`\`\n\nts:\n\n\`\`\`typescript\n // tslint:disable-next-line:no-input-rename\n  @Input('recipe') recipe: Recipe;\n  // tslint:disable-next-line:no-input-rename\n  @Input('index') index: number;\n\`\`\`\n\n\n\n## ngFor\n\n身为一个智障老人，经常容易忘记ngFor的语法，马克一下\n\n*ngFor=\"let xxx of xxxs; let i = index\"\n\n\n\n## 关于[ ]\n\n这里很迷惑我，有时候可以当做值传入ts，有时候可以代表html标签里面的属性值。比如：\n\n\`\`\`html\n<img [src]=\"recipe.imagePath\"\n     class=\"img-responsive\"\n     style=\"max-height: 300px\"\n>\n\`\`\`\n\n无所谓啦，需要记住不同的use case.\n\n\n\n\n\n# 路由\n\n\n\n## 架构\n\n1. 在app.module 同级目录下建立app-routing.module.ts\n\n2. \`\`\`typescript\n   // 在app.module里面importHttpClientModule\n   import {HttpClientModule} from '@angular/common/http';\n   \`\`\`\n\n3. 在app-routing.module.ts要定义每个自定义module\n\n4. 最好在app-routing.moudle.ts加入懒加载机制\n\n5. 每个module都要建立自己的module和xx-routing.module.ts, 最后不要忘记在app.module里面import\n\n\n\n## routerLink\n\n[routerLink] 会找到当前routing下的根\n\n比如在recipes下面\n\n\`\`\`html\n<a [routerLink]=\"[i]\">\n\`\`\`\n\n就会在recipes-routing下面找这个路径       recipes/:id\n\n[routerLinkActive]='active'\n\n当你点中的时候，就会让它active\n\n\n\n## 如何在ts里面得到route里面的param呢？ActivatedRoute\n\n首先要引入ActivatedRoute\n\n然后要调用它的params\n\nts:\n\n\`\`\`typescript\nid: number;\n\nconstructor( private route: ActivatedRoute,\n             ) { }\n\nngOnInit() {\n    this.route.params\n      .subscribe(\n        (params: Params) => {\n          this.id = +params.id;\n        }\n      );\n  }\n\`\`\`\n\n\n\n## Router\n\n如果你要跳转其他页面，你需要Router.\n\nts:\n\n\`\`\`typescript\nconstructor( private route: ActivatedRoute,\n             private router: Router,\n              ) { }\n\nthis.router.navigate(['../', this.id, 'edit'], {relativeTo: this.route});\n\`\`\`\n\n这个navigate 就是这个路径      recipes/:id/edit\n\nrelativeTo   是自动转入对应module的routing\n\n\n\n\n\n# Form\n\n\n\n## Reactive Form\n\n如果要使用Reactive Form 功能，就必须定义FormGroup\n\n每一个Group member 都必须创建自己的FormControl，\n\n可以加入Validator 来验证表单元素\n\n如果你有一组需要添加进之前的FormArray。你需要编写一个新的FormArray，然后把新的当做一个Group member 放到原来的FormGroup里\n\n\`\`\`typescript\nrecipeForm: FormGroup;\nconst recipeIngredients = new FormArray([]);\n\nfor (const ingredient of recipe.ingredients) {\n          recipeIngredients.push(\n            new FormGroup({\n              name: new FormControl(ingredient.name, Validators.required),\n              amount: new FormControl(ingredient.amount, [Validators.required, Validators.pattern('^[1-9]+[0-9]*$')])\n            })\n          );\n        }\n\n   this.recipeForm = new FormGroup({\n      name: new FormControl(recipeName, Validators.required),\n      imagePath: new FormControl(recipeImagePath, Validators.required),\n      description: new FormControl(recipeDescription, Validators.required),\n      ingredients: recipeIngredients\n    });\n\`\`\`\n\nhtml展示：\n\n首先需要在form标签加上 [formGroup]=\"recipeForm\"\n\n每一个表单元素都要加上 formControlName=\"xxx\"\n\n我们会通过 *ngIf=\"!recipeForm.get('xxx').valid && recipeForm.get('xxx').touched\" 来判断有没有通过验证\n\n内嵌formGroup我们通常会用*ngIf=\"!recipeForm.get(['ingredients', i, 'xxx']).valid && recipeForm.get(['ingredients', i, 'xxx']).touched\">  来判断是否通过验证\n\n\`\`\`html\n<form [formGroup]=\"recipeForm\" (submit)=\"onSubmit()\">\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <div class=\"form-group\">\n            <label for=\"name\">Name</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              formControlName=\"name\"\n              class=\"form-control\">\n            <span\n              style=\"color: red\"\n              *ngIf=\"!recipeForm.get('name').valid && recipeForm.get('name').touched\">\n              Name is required\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <div class=\"form-group\">\n            <label for=\"imagePath\">Image URL</label>\n            <input\n              type=\"text\"\n              id=\"imagePath\"\n              formControlName=\"imagePath\"\n              class=\"form-control\"\n              #imagePath>\n            <span\n              style=\"color: red\"\n              *ngIf=\"!recipeForm.get('imagePath').valid && recipeForm.get('imagePath').touched\">\n              ImagePath is required\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <img [src]=\"imagePath.value\" class=\"img-responsive\">\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div class=\"col-xs-12\">\n          <div class=\"form-group\">\n            <label for=\"description\">Description</label>\n            <textarea\n              type=\"text\"\n              id=\"description\"\n              formControlName=\"description\"\n              class=\"form-control\"\n              rows=\"6\">\n            </textarea>\n            <span\n              style=\"color: red\"\n              *ngIf=\"!recipeForm.get('description').valid && recipeForm.get('description').touched\">\n              Description is required\n            </span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row\">\n        <div\n          class=\"col-xs-12\"\n          formArrayName=\"ingredients\">\n          <div\n            class=\"row\"\n            *ngFor=\"let ingredient of getControls(); let i = index\"\n            [formGroupName]=\"i\" style=\"margin-top: 10px\">\n            <div class=\"col-xs-8\">\n              <input\n                type=\"text\"\n                class=\"form-control\"\n                formControlName=\"name\">\n              <span\n                style=\"color: red\"\n                *ngIf=\"!recipeForm.get(['ingredients', i, 'name']).valid && recipeForm.get(['ingredients', i, 'name']).touched\">\n              Ingredient name is required\n              </span>\n            </div>\n            <div class=\"col-xs-2\">\n              <input\n                type=\"number\"\n                class=\"form-control\"\n                formControlName=\"amount\">\n              <span class=\"help-block\"\n                *ngIf=\"!recipeForm.get(['ingredients', i, 'amount']).valid && recipeForm.get(['ingredients', i, 'amount']).touched\">\n                <span style=\"color: red\" *ngIf=\"!recipeForm.get(['ingredients', i, 'amount']).errors['required']\">Amount cannot be negative number</span>\n                <span style=\"color: red\" *ngIf=\"!recipeForm.get(['ingredients', i, 'amount']).errors['pattern']\">Ingredient amount required</span>\n              </span>\n            </div>\n        </div>\n      </div>\n\n    </form>\n\n\`\`\`\n\n\n\n\n\n# Observable\n\n\n\n## 什么是发布订阅模式？\n\nObservables 作为被观察者，是一个值或事件的流集合；而 Observer 则作为观察者，根据 Observables 进行处理。\n\nObservables 与 Observer 之间的订阅发布关系(观察者模式) 如下：\n\n- **订阅**：Observer 通过 Observable 提供的 subscribe() 方法订阅 Observable。\n- **发布**：Observable 通过回调 next 方法向 Observer 发布事件。\n\n\n\n## 两个Component 如何进行数据交互呢？\n\n我们需要用到Subject，Observable，Subscription\n\n1. 一般我们需要用到service进行交互\n\n​\t①先定义一个Subject的变量\n\n​\t②然后要在定义一个Observable的变量转换Subject\n\n​\t③定义改变数据的method\n\n\`\`\`typescript\nisAuthenticated = new Subject();\n\nauthObservable = this.isAuthenticated.asObservable();\n\nemitAuth(auth: boolean) {\n    this.isAuthenticated.next(auth);\n    this.isAuth = auth;\n  }\n\n\`\`\`\n\n2. 然后我们在传值Component发布数据\n\n\`\`\`typescript\nthis.authService.emitAuth(true);\n\n\`\`\`\n\n3. 在接收值Compoent订阅数据\n\n\`\`\`typescript\nprivate authSub: Subscription;\nisAuthenticated = false;\n\n  // 使用subscribe来订阅，当数据被发射出来的时候,这里就会接收到结果\n    this.authSub = this.authService.authObservable.subscribe(auth => {\n      this.isAuthenticated = auth;\n    });\n  }\n\n\`\`\`";

    return (
        <ReactMarkdown
            source={input}
            escapeHtml={false}
            renderers={{ code: CodeBlock }}
        />
    )
};

export default Note;